{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from collections import defaultdict, Counter\n",
    "from pprint import pprint\n",
    "from sys import getsizeof\n",
    "\n",
    "from river.naive_bayes import MultinomialNB,CategoricalNB, base\n",
    "from river.feature_extraction import BagOfWords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'chinese': 2, 'beijing': 1},\n",
       " {'chinese': 2, 'shanghai': 1},\n",
       " {'chinese': 1, 'macao': 1},\n",
       " {'tokyo': 1, 'japan': 1, 'chinese': 1}]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dummy\n",
    "mul = MultinomialNB()\n",
    "\n",
    "docs = [\n",
    "    (\"Chinese Beijing Chinese\", \"yes\"),\n",
    "    (\"Chinese Chinese Shanghai\", \"yes\"),\n",
    "    (\"Chinese Macao\", \"maybe\"),\n",
    "    (\"Tokyo Japan Chinese\", \"no\")\n",
    "]\n",
    "\n",
    "X  = []\n",
    "\n",
    "fx = BagOfWords(lowercase=True)\n",
    "for doc,_ in docs:\n",
    "    X.append(fx.transform_one(doc))\n",
    "# pd.DataFrame(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "defaultdict(<function <lambda> at 0x000001D3BC06FA30>,\n",
      "            {'age': defaultdict(<function <lambda>.<locals>.<lambda> at 0x000001D3BC06F9A0>,\n",
      "                                {'junior': defaultdict(<class 'int'>,\n",
      "                                                       {'Yes': 2}),\n",
      "                                 'senior': defaultdict(<class 'int'>,\n",
      "                                                       {'No': 1,\n",
      "                                                        'Yes': 1}),\n",
      "                                 'young': defaultdict(<class 'int'>,\n",
      "                                                      {'No': 1})}),\n",
      "             'income': defaultdict(<function <lambda>.<locals>.<lambda> at 0x000001D3BC06FAC0>,\n",
      "                                   {'fair': defaultdict(<class 'int'>,\n",
      "                                                        {'No': 2,\n",
      "                                                         'Yes': 2}),\n",
      "                                    'poor': defaultdict(<class 'int'>,\n",
      "                                                        {'Yes': 1})})})\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "240"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_count = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))\n",
    "\n",
    "''' Assuming the values are ordinally encoded\n",
    "age:\n",
    "'''\n",
    "X = [\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"poor\"},\n",
    "    {'age': \"young\", 'income': \"fair\"},\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"fair\"},\n",
    "]\n",
    "\n",
    "Y = [\"Yes\",\"Yes\",\"No\",\"No\",\"Yes\"]\n",
    "\n",
    "'''\n",
    "i = feature\n",
    "t = value of feature\n",
    "y = class\n",
    "'''\n",
    "\n",
    "for sample, label in zip(X,Y):\n",
    "    for i,t in sample.items():\n",
    "        feature_count[i][t][label]+=1\n",
    "pprint(feature_count)\n",
    "getsizeof(feature_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train set\n",
    "X = [\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"poor\"},\n",
    "    {'age': \"young\", 'income': \"fair\"},\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"fair\"},\n",
    "]\n",
    "\n",
    "Y = [\"Yes\",\"Yes\",\"No\",\"No\",\"Yes\"]\n",
    "\n",
    "model = CategoricalNB()\n",
    "\n",
    "for x,y in zip(X,Y):\n",
    "    model.learn_one(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "defaultdict(<class 'int'>, {'yes': 3, 'no': 2})\n"
     ]
    }
   ],
   "source": [
    "# Test cases\n",
    "sample = {'age': 'young', 'income': 'fair'}\n",
    "\n",
    "# pprint(model.feature_counts)\n",
    "\n",
    "pprint(model.class_counts)\n",
    "\n",
    "\n",
    "# print(\"P(y = 'yes') =\",model.class_counts.get('yes'))\n",
    "\n",
    "# print(f\"P(age='young'|y='yes') = {model.p_feature_given_class(feature='age', category = 'young', label ='yes')}\")\n",
    "\n",
    "# print(f\"P(income='fair'|y='yes') = {model.p_feature_given_class(feature='income', category = 'fair', label ='yes')}\")\n",
    "\n",
    "# print(f\"P(y='yes') = {model.p_class('yes')}\")\n",
    "# print(f\"P(y='no') = {model.p_class('no')}\")\n",
    "\n",
    "# print(f\"log P(age='young', income='fair' | y = 'Yes') = {model.joint_log_likelihood(sample)['yes']}\")\n",
    "\n",
    "# print(f\"log P(age='young', income='fair' | y = 'No') = {model.joint_log_likelihood(sample)['no']}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "\n",
    "encoder = OneHotEncoder()\n",
    "\n",
    "newX = pd.DataFrame([\n",
    "    {'age': \"senior\"  , 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"fair\"},\n",
    "    {'age': \"young\", 'income': \"fair\"},\n",
    "    {'age': \"senior\"  , 'income': \"poor\"},\n",
    "])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def showInfo(matrix):\n",
    "    print(f\"Data: {matrix.data}\")\n",
    "    print(f\"Indices: {matrix.indices}\")\n",
    "    print(f\"Pointers: {matrix.indptr}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, 3)\n"
     ]
    }
   ],
   "source": [
    "from scipy import sparse\n",
    "\n",
    "new_Y = [\"Yes\", \"No\", \"Yes\"]\n",
    "y = base.one_hot_encode(pd.Series(new_Y))\n",
    "classes = str(y.columns).lower()\n",
    "# print(classes)\n",
    "\n",
    "y = sparse.csc_matrix(y).T\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "defaultdict(<class 'int'>, {'yes': 3, 'no': 2})\n",
      "defaultdict(<class 'int'>, {'yes': 3, 'no': 2, 'i': 1, 'n': 2})\n"
     ]
    }
   ],
   "source": [
    "print(model.class_counts)\n",
    "\n",
    "for label, count in zip(classes,y.sum(axis=1)):\n",
    "    # print(f\"{label} : {count.item()}\")\n",
    "    model.class_counts[str(label).lower()] += count.item()\n",
    "    \n",
    "print(model.class_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<2x3 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 3 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 0]\n",
      " [1 0 1]]\n",
      "(2, 3)\n"
     ]
    }
   ],
   "source": [
    "print(y.todense())\n",
    "print(y.todense().shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 0]\n",
      " [1 0 0]\n",
      " [0 0 1]]\n",
      "(3, 3)\n"
     ]
    }
   ],
   "source": [
    "print(sparse.csr_matrix(base.one_hot_encode(newX['age'])).todense())\n",
    "print(sparse.csr_matrix(base.one_hot_encode(newX['age'])).todense().shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>junior</th>\n",
       "      <th>senior</th>\n",
       "      <th>young</th>\n",
       "      <th>fair</th>\n",
       "      <th>poor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   junior  senior  young  fair  poor\n",
       "0       0       1      0     1     0\n",
       "1       1       0      0     1     0\n",
       "2       0       0      1     1     0\n",
       "3       0       1      0     0     1"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "encodedX = pd.DataFrame()\n",
    "encodedAge = base.one_hot_encode(newX['age'])\n",
    "encodedIncome = base.one_hot_encode(newX['income'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[0, 1, 0, 1, 0],\n",
       "        [1, 0, 0, 1, 0],\n",
       "        [0, 0, 1, 1, 0],\n",
       "        [0, 1, 0, 0, 1]], dtype=int64)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sparse.csc_matrix(pd.concat([encodedAge,encodedIncome], axis=1)).todense()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.0 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "d65b8f5352ff0604208092e5303e87151b1b24d58dbb14532ef76eb8f35f61a8"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
