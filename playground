{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from collections import defaultdict, Counter\n",
    "from pprint import pprint\n",
    "from sys import getsizeof\n",
    "\n",
    "from river.naive_bayes import MultinomialNB, CategoricalNB, base\n",
    "from river.feature_extraction import BagOfWords\n",
    "from river.compose import Pipeline\n",
    "from scipy import sparse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   chinese  beijing  shanghai  macao  tokyo  japan\n",
      "0        2        1         0      0      0      0\n",
      "1        2        0         1      0      0      0\n",
      "2        1        0         0      1      0      0\n",
      "3        1        0         0      0      1      1\n",
      "       0  1  2  3\n",
      "maybe  0  0  1  0\n",
      "no     0  0  0  1\n",
      "yes    1  1  0  0\n"
     ]
    }
   ],
   "source": [
    "# X = pd.Series([\n",
    "#    \"Chinese Beijing Chinese\",\n",
    "#    \"Chinese Chinese Shanghai\",\n",
    "#    \"Chinese Macao\",\n",
    "#    \"Tokyo Japan Chinese\"\n",
    "# ])\n",
    "# y = pd.Series([\"yes\", \"yes\", \"maybe\", \"no\"])\n",
    "# fx = BagOfWords(lowercase=True)\n",
    "# model = MultinomialNB()\n",
    "\n",
    "\n",
    "# X = fx.transform_many(X)\n",
    "# print(X)\n",
    "# print(base.one_hot_encode(y).T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train set\n",
    "X = [\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"poor\"},\n",
    "    {'age': \"young\", 'income': \"fair\"},\n",
    "    {'age': \"senior\", 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"fair\"},\n",
    "]\n",
    "\n",
    "Y = [\"Yes\",\"Yes\",\"No\",\"No\",\"Yes\"]\n",
    "\n",
    "model = CategoricalNB()\n",
    "\n",
    "for x,y in zip(X,Y):\n",
    "    model.learn_one(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test cases\n",
    "sample = {'age': 'young', 'income': 'fair'}\n",
    "\n",
    "# pprint(model.feature_counts)\n",
    "\n",
    "# pprint(model.class_counts)\n",
    "\n",
    "# pprint(model.category_counts)\n",
    "\n",
    "\n",
    "# print(\"P(y = 'yes') =\",model.class_counts.get('yes'))\n",
    "\n",
    "# print(f\"P(age='young'|y='yes') = {model.p_feature_given_class(feature='age', category = 'young', label ='yes')}\")\n",
    "\n",
    "# print(f\"P(age='young'|y='no') = {model.p_feature_given_class(feature='age', category = 'young', label ='no')}\")\n",
    "\n",
    "# print(f\"P(income='fair'|y='yes') = {model.p_feature_given_class(feature='income', category = 'fair', label ='yes')}\")\n",
    "\n",
    "# print(f\"P(income='fair'|y='yes') = {model.p_feature_given_class(feature='income', category = 'fair', label ='no')}\")\n",
    "\n",
    "# print(f\"P(y='yes') = {model.p_class('yes')}\")\n",
    "# print(f\"P(y='no') = {model.p_class('no')}\")\n",
    "\n",
    "# print(f\"log P(age='young', income='fair' | y = 'Yes') = {model.joint_log_likelihood(sample)['yes']}\")\n",
    "\n",
    "# print(f\"log P(age='young', income='fair' | y = 'No') = {model.joint_log_likelihood(sample)['no']}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def showInfo(matrix,verbose=True, args=False):\n",
    "    \"\"\"\n",
    "    returns data, indices, pointers\n",
    "    \"\"\"\n",
    "    data = matrix.data\n",
    "    indices = matrix.indices\n",
    "    pointers = matrix.indptr\n",
    "    if verbose:\n",
    "        print(f\"Format: {matrix.getformat()}\")\n",
    "        print(f\"Shape: {matrix.shape}\")\n",
    "        print(f\"Data: {data}\")\n",
    "        print(f\"Indices: {indices}\")\n",
    "        print(f\"Pointers: {pointers}\")\n",
    "    if args:\n",
    "        return data, indices, pointers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def encodeX(df: pd.DataFrame):\n",
    "    feature_subsets = []\n",
    "    for col in df.columns:\n",
    "        temp = base.one_hot_encode(df[col])\n",
    "        temp.columns = [f\"{col}_{temp_col}\" for temp_col in temp.columns]\n",
    "        feature_subsets.append(temp)\n",
    "    \n",
    "    return pd.concat(feature_subsets,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     age_junior  age_senior  age_young  income_fair  income_poor\n",
      "no            1           0          0            1            0\n",
      "yes           0           2          1            2            1\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "defaultdict(<function river.naive_bayes.categorical.CategoricalNB.__init__.<locals>.<lambda>()>,\n",
       "            {'age_junior': defaultdict(int, {'no': 1}),\n",
       "             'income_fair': defaultdict(int, {'no': 1, 'yes': 2}),\n",
       "             'age_senior': defaultdict(int, {'yes': 2}),\n",
       "             'age_young': defaultdict(int, {'yes': 1}),\n",
       "             'income_poor': defaultdict(int, {'yes': 1})})"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newX = pd.DataFrame([\n",
    "    {'age': \"senior\"  , 'income': \"fair\"},\n",
    "    {'age': \"junior\", 'income': \"fair\"},\n",
    "    {'age': \"young\", 'income': \"fair\"},\n",
    "    {'age': \"senior\"  , 'income': \"poor\"},\n",
    "])\n",
    "newY = pd.Series([\"Yes\", \"No\", \"Yes\",\"Yes\"])\n",
    "\n",
    "X2 = encodeX(newX)\n",
    "y2 = base.one_hot_encode(newY)\n",
    "features, classes = X2.columns, [str(c).lower() for c in y2.columns]\n",
    "sparseX2 = sparse.csr_matrix(X2)\n",
    "sparseY2 = sparse.csc_matrix(y2).T\n",
    "\n",
    "fc = sparseY2 @ sparseX2\n",
    "\n",
    "# Visual purpose\n",
    "df_fc = pd.DataFrame(fc.todense(),columns=features,index=classes)\n",
    "print(df_fc)\n",
    "\n",
    "nb = CategoricalNB()\n",
    "nb.learn_many(newX,pd.Series(newY))\n",
    "\n",
    "nb.feature_counts\n",
    "\n",
    "nb.join"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.10.0 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "d65b8f5352ff0604208092e5303e87151b1b24d58dbb14532ef76eb8f35f61a8"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
