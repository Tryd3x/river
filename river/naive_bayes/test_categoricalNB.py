import pytest
import numpy as np
import pandas as pd
from .categorical import CategoricalNB

@pytest.fixture(scope='session')
def model():
    yield CategoricalNB(alpha=1.0)

def test_learn_one(model):

    # Sample data
    X = [
        {'age': "senior", 'income': "fair"},
        {'age': "junior", 'income': "poor"},
        {'age': "young", 'income': "fair"},
        {'age': "senior", 'income': "fair"},
        {'age': "junior", 'income': "fair"},
    ]

    # Sample label
    Y = ["Yes","Yes","No","No","Yes"]
    labels = [str(label).lower() for label in np.unique(Y)]
    for x,y in zip(X,Y):
        model.learn_one(x, y) 

    # non-negative validation for class counts
    for label in labels:
        assert model.class_counts[label] >= 0
    
    # Expected output for class count
    assert model.class_counts['yes'] == 3
    assert model.class_counts['no'] == 2

    # Expected output for feature count
    assert model.feature_counts['age_young']['yes'] == 0
    assert model.feature_counts['age_young']['no'] == 1

    assert model.feature_counts['income_poor']['no'] == 0
    assert model.feature_counts['income_poor']['yes'] == 1

def test_p_feature_given_class(model):

    values = []

    # conditional probability
    assert model.p_feature_given_class(feature='age', category = 'young', label ='yes') == 0.16666666666666666     

    values.append(model.p_feature_given_class(feature='age', category = 'young', label ='yes'))

    assert model.p_feature_given_class(feature='age', category = 'young', label ='no') == 0.4     

    values.append(model.p_feature_given_class(feature='age', category = 'young', label ='no'))
    
    assert model.p_feature_given_class(feature='income', category = 'fair', label ='yes') == 0.6

    values.append(model.p_feature_given_class(feature='income', category = 'fair', label ='yes'))

    assert model.p_feature_given_class(feature='income', category = 'fair', label ='no') == 0.75

    values.append(model.p_feature_given_class(feature='income', category = 'fair', label ='no'))

    # constraint check on probability values
    for p in values:
        assert p <= 1 and p > 0


def test_p_class(model):

    # prior probabilities of each class
    assert model.p_class('yes') == 0.6    
    assert model.p_class('no') == 0.4

    # sum of priors must between 0 and 1
    assert model.p_class('yes') + model.p_class('no') <=1 and model.p_class('yes') + model.p_class('no') > 0

def test_joint_log_likelihood(model):
    x = sample = {'age': 'young', 'income': 'fair'}
    values = []

    assert model.joint_log_likelihood(sample)['yes'] == -2.8134107167600364
    values.append(model.joint_log_likelihood(sample)['yes'])
    assert model.joint_log_likelihood(sample)['no'] == -2.120263536200091
    values.append(model.joint_log_likelihood(sample)['no'])

    # constraint check on log prob values
    for val in values:
        assert np.power(np.e,val) <= 1 and np.power(np.e,val) > 0

def test_learn_many(model):
    pass

def test_joint_log_likelihood_many(model):
    pass

def test_incremental_vs_batch(model):
    """
    This test evaluates results generated by incremental and batch approach on the same dataset.
    """
    pass
